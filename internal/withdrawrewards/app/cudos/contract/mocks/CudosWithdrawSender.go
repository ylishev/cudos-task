// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// CudosWithdrawSender is an autogenerated mock type for the CudosWithdrawSender type
type CudosWithdrawSender struct {
	mock.Mock
}

// Send provides a mock function with given fields: amount
func (_m *CudosWithdrawSender) Send(amount types.Coin) (types.Coin, *types.TxResponse, error) {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 types.Coin
	var r1 *types.TxResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Coin) (types.Coin, *types.TxResponse, error)); ok {
		return rf(amount)
	}
	if rf, ok := ret.Get(0).(func(types.Coin) types.Coin); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	if rf, ok := ret.Get(1).(func(types.Coin) *types.TxResponse); ok {
		r1 = rf(amount)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.TxResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(types.Coin) error); ok {
		r2 = rf(amount)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Withdraw provides a mock function with given fields:
func (_m *CudosWithdrawSender) Withdraw() (types.Coin, *types.TxResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 types.Coin
	var r1 *types.TxResponse
	var r2 error
	if rf, ok := ret.Get(0).(func() (types.Coin, *types.TxResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.Coin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	if rf, ok := ret.Get(1).(func() *types.TxResponse); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.TxResponse)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCudosWithdrawSender creates a new instance of CudosWithdrawSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCudosWithdrawSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *CudosWithdrawSender {
	mock := &CudosWithdrawSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
